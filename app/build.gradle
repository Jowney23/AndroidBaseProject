apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    // 路径搞不清楚就打印log瞅瞅
    //println("Current Path："+file("./").absolutePath)


    compileSdkVersion extBuildVersions.compile_sdk
    buildToolsVersion extBuildVersions.build_tools

    defaultConfig {
        applicationId extAppVersions.appApplicationId
        minSdkVersion extBuildVersions.min_sdk
        targetSdkVersion extBuildVersions.target_sdk
        versionCode extBuildVersions.version_code
        versionName extBuildVersions.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release1 {
            storeFile file("./sign/tsl_android_base_keystore.jks")
            storePassword "123456"
            keyAlias "tsl"
            keyPassword "123456"
        }
        release2 {
            storeFile file("./sign/xs2_4328_platform.jks")
            storePassword "123456"
            keyAlias "tslkeystore"
            keyPassword "123456"
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
    buildTypes {
        debug {
            //  applicationIdSuffix ".debug"
            //manifestPlaceholders = [
            //      APP_NAME: "@string/app_name_debug",
            //]
            manifestPlaceholders = [
                    APP_NAME: extAppVersions.appNameDebug,
            ]
        }

        release {
            manifestPlaceholders = [
                    APP_NAME: extAppVersions.appName,
            ]
            minifyEnabled false
             signingConfig signingConfigs.release1
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    applicationVariants.all { variant ->
        println("gradle1->   " + variant.buildType.name)
        def buildType = variant.buildType
        //编译完成前执行的操作
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def defaultDestinationPath = rootDir.getAbsolutePath()
            println("gradle2   " + defaultDestinationPath)
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //  outputFileName = "TSL-Android-setup-YXZ-" + defaultConfig.versionName + "_" + buildTime() + "_" + output.baseName + ".apk"
            }
        }
        //编译完成后执行的操作

        variant.assembleProvider.get().doLast {
            variant.outputs.all { output ->
                //复制到根目录下的output文件夹 如果不需要可以直接将代码删除
                def outputFile = output.outputFile
                println("gradle3   " + outputFile)
                publish_To_Local(output, defaultConfig.versionName)
            }
        }
    }

// To inline the bytecode built with JVM target 1.8 into
// bytecode that is being built with JVM target 1.6. (e.g. navArgs)

}

def publish_To_Local(output, versionName) {
    // 加载properties
    def properties = new Properties()
    def inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)
    //apk最终发布路径 （电脑上的真实目录, 配置在local.properties）
    //C:\Users\admin\Desktop\TSL_APP
    String publishDir = extApkVersions.publishDir
    String isPublish = extApkVersions.isPublish
    String versionType = extApkVersions.versionType
    String apkName = extApkVersions.apkName
    println("1." + publishDir + "      2." + isPublish + "           3." + versionType + "        4." + apkName)
    if (publishDir == null || publishDir.isEmpty() || output.name.contains("debug")) {
        println("禁止发布apk到本地")
        return
    }
    // 从output 目录复制到发布目录(数组，可以写多个目录)
    ["${publishDir}"].each { dest ->
        copy {
            from output.outputFile
            into dest
            rename(output.outputFile.name, apkName + "_" + versionName + "." + buildTime() + "_" + versionType + ".apk_${output.name}")
        }
    }
}

def buildTime() {
    return new Date().format("yyMMdd_HHmm", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {
    implementation project(path: ':common')
    implementation project(path: ':player')
    implementation project(path: ':camera')
    /*Room components*/
    implementation deps.room.runtime
    kapt deps.room.compiler//room通过注解的方式编写代码，该库用来编译注解
    implementation deps.room.paging
    implementation deps.paging_runtime
    //单元测试
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
