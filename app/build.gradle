apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    // 路径搞不清楚就打印log瞅瞅
    //println("Current Path："+file("./").absolutePath)


    compileSdkVersion buildVersions.compile_sdk
    buildToolsVersion buildVersions.build_tools

    defaultConfig {
        applicationId "com.example.androidbase"
        minSdkVersion buildVersions.min_sdk
        targetSdkVersion buildVersions.target_sdk
        versionCode buildVersions.version_code
        versionName buildVersions.version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("./sign/tsl_android_base_keystore.jks")
            storePassword "123456"
            keyAlias "tsl"
            keyPassword "123456"
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [
                    APP_NAME: "@string/app_name_debug",
            ]
        }

        release {
            manifestPlaceholders = [
                    APP_NAME: "@string/app_name",
            ]
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        println("gradle1->   " + variant.buildType.name)
        def buildType = variant.buildType
        //编译完成前执行的操作
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def defaultDestinationPath = rootDir.getAbsolutePath()
            println("gradle2   " + defaultDestinationPath)
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //  outputFileName = "TSL-Android-setup-YXZ-" + defaultConfig.versionName + "_" + buildTime() + "_" + output.baseName + ".apk"
            }
        }
        //编译完成后执行的操作

        variant.assembleProvider.get().doLast {
            variant.outputs.all { output ->
                //复制到根目录下的output文件夹 如果不需要可以直接将代码删除
                def outputFile = output.outputFile
                println("gradle3   " + outputFile)
                publish_To_Local(output, defaultConfig.versionName)
            }
        }
    }

}

def publish_To_Local(output, versionName) {
    // 加载properties
    def properties = new Properties()
    def inputStream = project.rootProject.file('local.properties').newDataInputStream()
    properties.load(inputStream)
    //apk最终发布路径 （电脑上的真实目录, 配置在local.properties）
    //C:\Users\admin\Desktop\TSL_APP
    String publishDir = properties.getProperty("apk.publishDir")
    String isPublish = properties.getProperty("apk.isPublish")
    if (publishDir == null || publishDir.isEmpty() || isPublish == "false") {
        println("NO Publish To Local ! 本地发布路径为空！")
        return
    }
    // 从output 目录复制到发布目录(数组，可以写多个目录)
    ["${publishDir}"].each { dest ->
        copy {
            from output.outputFile
            into dest
            rename(output.outputFile.name, "Android_Base" + versionName + "_" + buildTime() + "_" + output.baseName + ".apk")
        }
    }
}

def buildTime() {
    return new Date().format("yyyyMMdd_HHmm", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {
    implementation project(path: ':common')
}
